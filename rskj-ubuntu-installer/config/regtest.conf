blockchain.config.name = "regtest"

database {
    # place to save physical storage files
    dir = /var/lib/rsk/database/regtest

    # every time the application starts the existing database will be destroyed and all the data will be downloaded from peers again
    # having this set on true does NOT mean that the block chain will start from the last point
    # [true/false]
    reset = false
}

rpc {
providers : {
    web: {
        cors: "localhost",
        http: {
            enabled: true,
            bind_address = "0.0.0.0",
            hosts = ["localhost"]
            port: 4444,
            }
        ws: {
            enabled: false,
            bind_address: "0.0.0.0",
            port: 4445,
            }
        }
    }

    modules = [
        {
            name: "eth",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "net",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "rpc",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "web3",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "evm",
            version: "1.0",
            enabled: "true"
        },
        {
            name: "sco",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "txpool",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "personal",
            version: "1.0",
            enabled: "true"
        }
    ]
}

# account loaded when the node start.
wallet {
    accounts = []
}

wire {
    protocol: "rsk"
}

# solc compiler path
solc.path = <SOLC_PATH> 

# not good reputation expiration time in seconds
scoring {
    # punishment by node id
    nodes {
        # number of nodes to keep scoring
        number: 100
        # initial punishment duration (in minutes, default = 10 minutes)
        duration: 12
        # punishment duration increment (in percentage, default = 10)
        increment: 10
        # maximum punishment duration (in minutes, default = 0 minutes, no maximum)
        maximum: 0
    }
    # punishment by address
    addresses {
        # initial punishment duration (in minutes, default = 10 minutes)
        duration: 12
        # punishment duration increment (in percentage, default = 10)
        increment: 10
        # maximum punishment duration (in minutes, default = 1 week)
        maximum: 6000
    }
}

miner {
    server.enabled = true
    client.enabled = true
    minGasPrice = 0

    # these are values used by MinerServer to set the notify flag on/off
    gasUnitInDollars = 0.001
    minFeesNotifyInDollars = 30

    # this is a secret passphrase that is used to derive the address where the miner gets the reward.
    # please note this is stored in a local wallet and not recommended for production.
    coinbase.secret = <COINBASE_SECRET> 
}

prune {
    # prune service could be enabled or not
    # values: [true/false]
    # default: false
    enabled = true 

    # No of blocks to process
    blocks {
        # No of blocks to copy in each prune run
        # default: 5000
        toCopy = 5000

        # No of blocks to wait to run prune again
        # default: 10000
        toWait = 10000

        # No of blocks to suspend blockchain process
        # in order to avoid forks
        # default: 100
        toAvoidForks = 100
    }
}